// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type xdpsipbenchRtpInfo struct {
	_     structs.HostLayout
	Bytes uint64
	Pkts  uint64
}

// loadXdpsipbench returns the embedded CollectionSpec for xdpsipbench.
func loadXdpsipbench() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpsipbenchBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpsipbench: %w", err)
	}

	return spec, err
}

// loadXdpsipbenchObjects loads xdpsipbench and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpsipbenchObjects
//	*xdpsipbenchPrograms
//	*xdpsipbenchMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpsipbenchObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpsipbench()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpsipbenchSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpsipbenchSpecs struct {
	xdpsipbenchProgramSpecs
	xdpsipbenchMapSpecs
	xdpsipbenchVariableSpecs
}

// xdpsipbenchProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpsipbenchProgramSpecs struct {
	Sipbench *ebpf.ProgramSpec `ebpf:"sipbench"`
}

// xdpsipbenchMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpsipbenchMapSpecs struct {
	Rules *ebpf.MapSpec `ebpf:"rules"`
}

// xdpsipbenchVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpsipbenchVariableSpecs struct {
}

// xdpsipbenchObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpsipbenchObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpsipbenchObjects struct {
	xdpsipbenchPrograms
	xdpsipbenchMaps
	xdpsipbenchVariables
}

func (o *xdpsipbenchObjects) Close() error {
	return _XdpsipbenchClose(
		&o.xdpsipbenchPrograms,
		&o.xdpsipbenchMaps,
	)
}

// xdpsipbenchMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpsipbenchObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpsipbenchMaps struct {
	Rules *ebpf.Map `ebpf:"rules"`
}

func (m *xdpsipbenchMaps) Close() error {
	return _XdpsipbenchClose(
		m.Rules,
	)
}

// xdpsipbenchVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdpsipbenchObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpsipbenchVariables struct {
}

// xdpsipbenchPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpsipbenchObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpsipbenchPrograms struct {
	Sipbench *ebpf.Program `ebpf:"sipbench"`
}

func (p *xdpsipbenchPrograms) Close() error {
	return _XdpsipbenchClose(
		p.Sipbench,
	)
}

func _XdpsipbenchClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpsipbench_bpfeb.o
var _XdpsipbenchBytes []byte
